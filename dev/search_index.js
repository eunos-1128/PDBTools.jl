var documenterSearchIndex = {"docs":
[{"location":"selections/#selections","page":"Selections","title":"Selection functions","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"A simple selection syntax is provided. Use it with, for example: ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"atoms = select(atoms,\"protein and resnum < 30\")","category":"page"},{"location":"selections/#General-selections","page":"Selections","title":"General selections","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"Accepted Boolean operators: and, or, and not. ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The accepted keywords for the selection are: ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Keyword Options Input value Example\nindex =,>,<,<=,>= Integer index <= 10\nindex_pdb =,>,<,<=,>= Integer index_pdb <= 10\nname  String name CA\nelement  String element N\nresname  String resname ALA\nresnum =,>,<,<=,>= Integer resnum = 10\nresidue =,>,<,<=,>= Integer residue = 10\nchain  String chain A\nmodel  Integer model 1\nb =,>,<,<=,>= Real b > 0.5\noccup =,>,<,<=,>= Real occup >= 0.3\nsegname  String segname PROT\n   ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nresnum is the residue number as written in the PDB file, while residue is the residue number counted sequentially in the file.index_pdb is the number written in the \"atom index\" field of the PDB file, while index is the sequential index of the atom in the file. ","category":"page"},{"location":"selections/#Special-macros:-proteins,-water","page":"Selections","title":"Special macros: proteins, water","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"Just use these keywords to select the residues matching the properties desired. ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Examples:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"aromatic = select(atoms,\"aromatic\")\n","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"aromatic = select(atoms,\"charged\")\n","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Available keywords:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Keywords  \nwater  \nprotein backbone sidechain\nacidic basic \naliphatic aromatic \ncharged neutral \npolar nonpolar \nhydrophobic  \n  ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nThe properties refer to protein residues and will return false to every non-protein residue. Thus, be careful with the use of not with these selections, as they might retrieve non-protein atoms.","category":"page"},{"location":"selections/#Retrieving-indexes-only","page":"Selections","title":"Retrieving indexes only","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"If only the indexes of the atoms are of interest, a specific function will directly return them:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"indexes = selindex(atoms,\"protein and name CA\")\n","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nAll indexing is 1-based. Thus, the first atom of the structure is atom 1.","category":"page"},{"location":"selections/#Use-Julia-anonymous-functions-directly","page":"Selections","title":"Use Julia anonymous functions directly","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"Selections can be done using Julia anonymous functions directly, providing a greater control over the selection and, possibly, the use of user defined selection  functions. For example:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"atoms = select(atoms, by = atom -> atom.x < 10.)\n","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"With that, selections can become really complex, as:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"sel = atom -> (atom.x < 10. && atom.resname == \"GLY\") || (atom.name == \"CA\") \natoms = select(atoms, by = sel )\n","category":"page"},{"location":"auxiliary/#Some-auxiliary-functions-to-quickly-retrieve-some-data","page":"Auxiliary functions","title":"Some auxiliary functions to quickly retrieve some data","text":"","category":"section"},{"location":"auxiliary/#Get-the-protein-sequence","page":"Auxiliary functions","title":"Get the protein sequence","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"To obtain a list of the residue names of the protein with three- and one-letter codes, use","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> seq = getseq(\"file.pdb\")\n76×2 Array{String,2}:\n \"VAL\"  \"V\"\n \"LYS\"  \"K\"\n ⋮      \n \"ARG\"  \"R\"\n \"GLY\"  \"G\"\n","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"note: Note\nIf there is some non-standard protein residue in the sequence, inform the getseq function by adding a selection:julia> getseq(\"file.pdb\",\"protein or resname NEW\")\n76×2 Array{String,2}:\n \"VAL\"  \"V\"\n \"NEW\"  \"N\"\n ⋮      \n \"ARG\"  \"R\"\n \"GLY\"  \"G\"","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The getseq function can of course be used on an Atom list, accepts selections as the last argument, as well as the reading and writing functions:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"atoms = readPDB(\"file.pdb\")\nseq = getseq(atoms,\"chain A\")\n","category":"page"},{"location":"auxiliary/#Obtain-arrays-with-coordinates","page":"Auxiliary functions","title":"Obtain arrays with coordinates","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"All atoms:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> x = coor(atoms)\n3×1463 Array{Float64,2}:\n  -9.229  -10.048 …    6.408    6.017\n -14.861  -15.427    -12.034  -10.967\n  -5.481   -5.569     -8.343   -9.713\n","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Or use selections to retrieve the coordinates of subsets of atoms:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Calpha coordinates:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> xCA = coor(atoms,\"name CA\")\n3×104 Array{Float64,2}:\n  -8.483   -5.113  …  12.552   9.196 \n -14.912  -13.737      0.892  -0.734 \n  -6.726   -5.466     -3.466  -4.108 \n","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"By default, the output arrays are column based (the x, y and z coordinates of each atom are in each row). If you want a row-based output, add column_based = false to the input parameters of coor: coor(atoms,column_based=false)","category":"page"},{"location":"auxiliary/#Maximum-and-minimum-coordinates-of-the-atoms","page":"Auxiliary functions","title":"Maximum and minimum coordinates of the atoms","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Use maxmin(atoms), or maxmin(atoms,\"resname CA\"), for example:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> m = maxmin(atoms,\"chain A\")\n\n Minimum atom coordinates: xmin = [-41.5, -41.526, -41.517]\n Maximum atom coordinates: xmax = [41.583, 41.502, 41.183]\n Length in each direction: xlength = [83.083, 83.028, 82.7]\n","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"m is a structure containing the three vectors with minimum and maximum coordinates, and lengths.","category":"page"},{"location":"elements/#Atom-properties","page":"Element properties","title":"Atom properties","text":"","category":"section"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"Some simple atom properties can be retrieved using special functions, which operate on atoms of the type Atom. For example:","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"julia> atoms = readPDB(\"./file.pdb\");\n\njulia> atoms[1]\n   PDBTools.Atom with fields:\n   index name resname chain   resnum  residue        x        y        z     b occup model segname index_pdb\n       1   OW     SOL     X        1        1   54.370   45.310   33.970  0.00  0.00     1       -         1\n\njulia> mass(atoms[1])\n14.0067\n\njulia> name(atoms[1])\n\"Nitrogen\"\n\njulia> atomic_number(atoms[1])\n7\n\njulia> element(atoms[1])\n\"N\"\n","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Install the package using the package manager:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ] add PDBTools\n","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"and load it with","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using PDBTools\n","category":"page"},{"location":"readwrite/#Read-and-write-files","page":"Read and Write","title":"Read and write files","text":"","category":"section"},{"location":"readwrite/#Read-a-PDB-file","page":"Read and Write","title":"Read a PDB file","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"To read a PDB file and return a vector of atoms of type Atom, do:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"atoms = readPDB(\"file.pdb\")\n","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"Atom is the structure of data containing the atom index, name, residue, coordinates, etc. For example, after reading a file (as shown bellow), a list of atoms with the following structure will be generated:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> atoms[1]\n   PDBTools.Atom with fields:\n   index name resname chain   resnum  residue        x        y        z     b occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"The data in the Atom structure is organized as follows:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"struct Atom\n  index :: Int64 # The sequential index of the atoms in the file\n  index_pdb :: Int64 # The index as written in the PDB file (might be anything)\n  name :: String\n  resname :: String\n  chain :: String\n  resnum :: Int64 # Number of residue as written in PDB file\n  residue :: Int64 # Sequential residue (molecule) number in file\n  x :: Float64\n  y :: Float64\n  z :: Float64\n  b :: Float64\n  occup :: Float64\n  model :: Int64\n  segname :: String # Segment name (cols 73:76)\nend","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"tip: Tip\nFor all these reading and writting functions, a final argument can be provided to read or write a subset of the atoms, following the selection syntax described  in the Selection section. For example:protein = readPDB(\"file.pdb\",\"protein\")\norarginines = readPDB(\"file.pdb\",\"resname ARG\")\nThe only difference is that, if using Julia anonymous functions, the keyword is only:arginines = readPDB(\"file.pdb\",only = atom -> atom.resname == \"ARG\")\nThe same is valid for edit and write functions, below. ","category":"page"},{"location":"readwrite/#Retrive-from-Protein-Data-Bank","page":"Read and Write","title":"Retrive from Protein Data Bank","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"Use the wget function to retrieve the atom data directly from the PDB database, optionally filtering the atoms with a selection:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> atoms = wget(\"1LBD\",\"name CA\")\n   Array{Atom,1} with 238 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z     b occup model segname index_pdb\n       2   CA     SER     A      225        1   46.080   83.165   70.327 68.73  1.00     1       -         2\n       8   CA     ALA     A      226        2   43.020   80.825   70.455 63.69  1.00     1       -         8\n      13   CA     ASN     A      227        3   41.052   82.178   67.504 53.45  1.00     1       -        13\n                                                       ⋮\n    1847   CA     GLN     A      460      236  -22.650   79.082   50.023 71.46  1.00     1       -      1847\n    1856   CA     MET     A      461      237  -25.561   77.191   51.710 78.41  1.00     1       -      1856\n    1864   CA     THR     A      462      238  -26.915   73.645   51.198 82.96  1.00     1       -      1864\n","category":"page"},{"location":"readwrite/#Edit-a-PDB-file","page":"Read and Write","title":"Edit a PDB file","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"Using the editPDB function, a vector of the same structure as above is returned, but of MutableAtom type, meaning that the content of every field can be modified. For example:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> atoms = editPDB(\"file.pdb\")\n   Array{PDBTools.Atom,1} with 62026 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z     b occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n       2  HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n       3  HT2     ALA     A        1        1   -9.488  -13.913   -5.295  0.00  0.00     1    PROT         3\n                                                       ⋮ \n\njulia> atoms[1].segname = \"ABCD\"\n\"ABCD\"\n\njulia> atoms[1]\n   PDBTools.MutableAtom with fields:\n   index name resname chain   resnum  residue        x        y        z     b occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    ABCD         1\n","category":"page"},{"location":"readwrite/#Write-a-PDB-file","page":"Read and Write","title":"Write a PDB file","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"To write a PDB file use the writePDB function, as:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"writePDB(atoms,\"file.pdb\")\n","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"where atoms contain a list of atoms in the Atom or MutableAtom structures.","category":"page"},{"location":"readwrite/#Read-and-write-single-atom-lines","page":"Read and Write","title":"Read and write single-atom lines","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"PDBTools.read_atom(pdb_line): Given a line of a PDB file containing atom data, returns the data in a Atom structure. To convert the atom read with this function into a mutable structure, use atom = MutableAtom(atom).","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"PDBTools.write_atom(atom::Atom): Given an atom in the Atom structure, returns a string formatted in the PDB format, to be written to a file. ","category":"page"},{"location":"#PDBTools","page":"Home","title":"PDBTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PDBTools is a simple package to read and write Protein Data Bank files, select atoms, and work with their coordinates.  ","category":"page"},{"location":"#Features:","page":"Home","title":"Features:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple data structure: julia> atoms[1]\n  PDBTools.Atom with fields:\n  index name resname chain   resnum  residue        x        y        z     b occup model segname index_pdb\n      1   OW     SOL     X        1        1   54.370   45.310   33.970  0.00  0.00     1       -         1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Selection syntax:resname ARG and name CA","category":"page"},{"location":"","page":"Home","title":"Home","text":"Allows use of Julia (possibly user-defined) functions for selection:atom -> ( atom.resname == \"ARG\" && atom.x < 10 ) || atom.name == \"N\"","category":"page"},{"location":"#Not-indicated-for:","page":"Home","title":"Not indicated for:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We do not aim to provide the fastest PDB parsing methods. If speed in reading files, returning subsets of the structures, etc., is critical to you, probably you will do better with some packages of  BioJulia,  BioStructures in particular.","category":"page"}]
}
